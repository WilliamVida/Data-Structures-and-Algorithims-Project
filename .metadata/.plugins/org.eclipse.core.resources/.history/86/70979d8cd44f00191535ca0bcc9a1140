package ie.gmit.sw;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Iterator;
import java.util.Map;
import java.util.Queue;
import java.util.TreeMap;

import javax.imageio.ImageIO;
//import javax.swing.text.html.HTMLDocument.Iterator;

public class ReallySimpleWordCloud {
	
	private int n = 20; // number of words to place
	private static final int WIDTH = 800;
	private static final int HEIGHT = 600;
    private static long startTime = System.currentTimeMillis();

	public void placeWords (Queue<WordFrequency3> q, Graphics g, int n) {
		
		Iterator<WordFrequency3> i = q.iterator();
		int counter = 0;
		int max = Integer.MIN_VALUE;
		int min = Integer.MAX_VALUE;
		
		while (i.hasNext() && counter < n) {
			//int j = i.next().getFrequency();
			//if (i > max) max = j;
			//if (i < min) min = j;
			counter++;	
		}
		
		counter = 0;
		
		while (!q.isEmpty() && counter < n) {
			WordFrequency3 wf = q.poll();
			Font font = new Font(Font.SANS_SERIF, Font.ITALIC, 42);
			g.setColor(Color.yellow);
			g.drawString("TEST", 10, 150);		
			counter++;
		}
	}
	
	/*public double scale(int inVal, int inMin, int inMax) {
		
		double max = Double.valueOf(inMax);
		double min = Double.valueOf(inMin);
		double value = Double.valueOf(inVal);
		
		return ();
	}*/

	public static void main(String args[]) throws Exception {
		
Path path = Paths.get(System.getProperty("user.dir")).resolve("WarAndPeace-LeoTolstoy.txt");
		
		BufferedReader reader = new BufferedReader(new FileReader(path.toFile()));
		
		int countword = 0;
		
		Map<String, Integer> frequency = new TreeMap<String, Integer>();
	
		String line = reader.readLine();
		while(line != null) {
			// System.out.println("Processing line: " + line);
			if(!line.trim().equals("")) {
				String [] words = line.split(" ");

				for(String word : words) {
					if(word == null || word.trim().equals("")) {
						continue;
					}
					String processed = word.toLowerCase();
					processed = processed.replace(",", "");
					countword++;
					if(frequency.containsKey(processed)) {
						frequency.put(processed, frequency.get(processed) + 1);
					} else {
						frequency.put(processed, 1);
					}
				} // for
			}	
			line = reader.readLine();
		} // while
			
		// System.out.println(frequency);
		
		int mostFrequentlyUsed = 0;
		String theWord = null;
		
		/*for(String word : frequency.keySet()) {
			Integer theVal = frequency.get(word);
			if(theVal > mostFrequentlyUsed) {
				mostFrequentlyUsed = theVal;
				theWord = word;
			}
		} // for*/
		
        for (String word : frequency.keySet()) {
            int count = frequency.get(word);
            Integer theVal = frequency.get(word);
			if(theVal > mostFrequentlyUsed) {
				mostFrequentlyUsed = theVal;
				theWord = word;
			}
                System.out.println(count + "\t" + word);
        } // for
		
		System.out.println();
		System.out.printf("the most frequently used word is '%s', %d times", 
				theWord, mostFrequentlyUsed);
		System.out.println("\nTotals words = " + countword);
		
		long endTime = System.currentTimeMillis();
        System.out.println("It took " + (endTime - startTime) + " milliseconds");
		
		// create image
		BufferedImage image = new BufferedImage(WIDTH, HEIGHT, BufferedImage.TYPE_4BYTE_ABGR);
		
		// add words
		placeWords(, image.getGraphics(), 20);
		
		// write image
		ImageIO.write(image, "png", new File("image.png"));
		
		// finish
		System.out.println("Image completed.");
		
		/*Font font = new Font(Font.SANS_SERIF, Font.BOLD, 62);
		BufferedImage image = new BufferedImage(600, 300, BufferedImage.TYPE_4BYTE_ABGR);
		Graphics graphics = image.getGraphics();
		graphics.setColor(Color.red);
		graphics.setFont(font);
		graphics.drawString("Data Structures", 0, 100);

		font = new Font(Font.SANS_SERIF, Font.ITALIC, 42);
		graphics.setFont(font);
		graphics.setColor(Color.yellow);
		graphics.drawString("and Algorithms", 10, 150);

		font = new Font(Font.MONOSPACED, Font.PLAIN, 22);
		graphics.setFont(font);
		graphics.setColor(Color.blue);
		graphics.drawString("2019 Assignment", 40, 180);		
		
		graphics.dispose();
		ImageIO.write(image, "png", new File("image.png"));*/
	}
}